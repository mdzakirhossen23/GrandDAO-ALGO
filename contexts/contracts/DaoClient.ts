/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "pay(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createDao(pay,byte[],string,string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateTemplate(pay,byte[],string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createGoal(pay,byte[],string,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createIdeas(pay,byte[],string,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createIdeasVote(pay,byte[],uint64,uint64,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendMsg(pay,byte[],uint64,string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendReply(pay,byte[],uint64,string,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addDonation(pay,byte[],byte[],uint64,uint64,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "joinCommunity(pay,byte[],uint64,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "_dao_ids": {
          "type": "uint64",
          "key": "_dao_ids"
        },
        "_donations_ids": {
          "type": "uint64",
          "key": "_donations_ids"
        },
        "_goal_ids": {
          "type": "uint64",
          "key": "_goal_ids"
        },
        "_ideas_ids": {
          "type": "uint64",
          "key": "_ideas_ids"
        },
        "_join_ids": {
          "type": "uint64",
          "key": "_join_ids"
        },
        "_ideas_vote_ids": {
          "type": "uint64",
          "key": "_ideas_vote_ids"
        },
        "_message_ids": {
          "type": "uint64",
          "key": "_message_ids"
        },
        "_reply_ids": {
          "type": "uint64",
          "key": "_reply_ids"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 8
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDkKaW50IDE="
  },
  "contract": {
    "name": "Granddao",
    "desc": "",
    "methods": [
      {
        "name": "pay",
        "args": [
          {
            "name": "boxMBRPayment",
            "type": "pay",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createDao",
        "args": [
          {
            "name": "boxMBRPayment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "_dao_id",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "_dao_wallet",
            "type": "string",
            "desc": ""
          },
          {
            "name": "_dao_uri",
            "type": "string",
            "desc": ""
          },
          {
            "name": "_template",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "updateTemplate",
        "args": [
          {
            "name": "boxMBRPayment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "_dao_id",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "_template",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "string",
          "desc": ""
        }
      },
      {
        "name": "createGoal",
        "args": [
          {
            "name": "boxMBRPayment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "_goal_id",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "_goal_uri",
            "type": "string",
            "desc": ""
          },
          {
            "name": "_dao_id",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "createIdeas",
        "args": [
          {
            "name": "boxMBRPayment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "_ideas_id",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "_ideas_uri",
            "type": "string",
            "desc": ""
          },
          {
            "name": "_goal_id",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "createIdeasVote",
        "args": [
          {
            "name": "boxMBRPayment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "_ideas_votes_id",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "_goal_id",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "_ideas_id",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "_wallet",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "sendMsg",
        "args": [
          {
            "name": "boxMBRPayment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "_message_id",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "_ideas_id",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "_message",
            "type": "string",
            "desc": ""
          },
          {
            "name": "_sender",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "sendReply",
        "args": [
          {
            "name": "boxMBRPayment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "_reply_id",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "_message_id",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "_reply",
            "type": "string",
            "desc": ""
          },
          {
            "name": "ideas_id",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "addDonation",
        "args": [
          {
            "name": "boxMBRPayment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "_donation_id",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "_ideas_id",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "_ideas_id_int",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "_doantion",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "_donator",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "joinCommunity",
        "args": [
          {
            "name": "boxMBRPayment",
            "type": "pay",
            "desc": ""
          },
          {
            "name": "_join_id",
            "type": "byte[]",
            "desc": ""
          },
          {
            "name": "dao_id",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "person",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the Granddao smart contract.
 */
export type Granddao = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'pay(pay)void' | 'pay', {
      argsObj: {
        boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'createDao(pay,byte[],string,string,string)uint64' | 'createDao', {
      argsObj: {
        boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        _dao_id: Uint8Array
        _dao_wallet: string
        _dao_uri: string
        _template: string
      }
      argsTuple: [boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, _dao_id: Uint8Array, _dao_wallet: string, _dao_uri: string, _template: string]
      returns: bigint
    }>
    & Record<'updateTemplate(pay,byte[],string)string' | 'updateTemplate', {
      argsObj: {
        boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        _dao_id: Uint8Array
        _template: string
      }
      argsTuple: [boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, _dao_id: Uint8Array, _template: string]
      returns: string
    }>
    & Record<'createGoal(pay,byte[],string,uint64)uint64' | 'createGoal', {
      argsObj: {
        boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        _goal_id: Uint8Array
        _goal_uri: string
        _dao_id: bigint | number
      }
      argsTuple: [boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, _goal_id: Uint8Array, _goal_uri: string, _dao_id: bigint | number]
      returns: bigint
    }>
    & Record<'createIdeas(pay,byte[],string,uint64)uint64' | 'createIdeas', {
      argsObj: {
        boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        _ideas_id: Uint8Array
        _ideas_uri: string
        _goal_id: bigint | number
      }
      argsTuple: [boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, _ideas_id: Uint8Array, _ideas_uri: string, _goal_id: bigint | number]
      returns: bigint
    }>
    & Record<'createIdeasVote(pay,byte[],uint64,uint64,string)uint64' | 'createIdeasVote', {
      argsObj: {
        boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        _ideas_votes_id: Uint8Array
        _goal_id: bigint | number
        _ideas_id: bigint | number
        _wallet: string
      }
      argsTuple: [boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, _ideas_votes_id: Uint8Array, _goal_id: bigint | number, _ideas_id: bigint | number, _wallet: string]
      returns: bigint
    }>
    & Record<'sendMsg(pay,byte[],uint64,string,string)uint64' | 'sendMsg', {
      argsObj: {
        boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        _message_id: Uint8Array
        _ideas_id: bigint | number
        _message: string
        _sender: string
      }
      argsTuple: [boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, _message_id: Uint8Array, _ideas_id: bigint | number, _message: string, _sender: string]
      returns: bigint
    }>
    & Record<'sendReply(pay,byte[],uint64,string,uint64)uint64' | 'sendReply', {
      argsObj: {
        boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        _reply_id: Uint8Array
        _message_id: bigint | number
        _reply: string
        ideas_id: bigint | number
      }
      argsTuple: [boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, _reply_id: Uint8Array, _message_id: bigint | number, _reply: string, ideas_id: bigint | number]
      returns: bigint
    }>
    & Record<'addDonation(pay,byte[],byte[],uint64,uint64,string)void' | 'addDonation', {
      argsObj: {
        boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        _donation_id: Uint8Array
        _ideas_id: Uint8Array
        _ideas_id_int: bigint | number
        _doantion: bigint | number
        _donator: string
      }
      argsTuple: [boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, _donation_id: Uint8Array, _ideas_id: Uint8Array, _ideas_id_int: bigint | number, _doantion: bigint | number, _donator: string]
      returns: void
    }>
    & Record<'joinCommunity(pay,byte[],uint64,string)uint64' | 'joinCommunity', {
      argsObj: {
        boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        _join_id: Uint8Array
        dao_id: bigint | number
        person: string
      }
      argsTuple: [boxMBRPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, _join_id: Uint8Array, dao_id: bigint | number, person: string]
      returns: bigint
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      '_dao_ids'?: IntegerState
      '_donations_ids'?: IntegerState
      '_goal_ids'?: IntegerState
      '_ideas_ids'?: IntegerState
      '_join_ids'?: IntegerState
      '_ideas_vote_ids'?: IntegerState
      '_message_ids'?: IntegerState
      '_reply_ids'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type GranddaoSig = keyof Granddao['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends GranddaoSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Granddao smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends GranddaoSig> = Granddao['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Granddao smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GranddaoSig> = Granddao['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type GranddaoCreateCalls = (typeof GranddaoCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type GranddaoCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type GranddaoDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: GranddaoCreateCalls) => GranddaoCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class GranddaoCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Granddao smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the pay(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static pay(args: MethodArgs<'pay(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'pay(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxMBRPayment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createDao(pay,byte[],string,string,string)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createDao(args: MethodArgs<'createDao(pay,byte[],string,string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createDao(pay,byte[],string,string,string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxMBRPayment, args._dao_id, args._dao_wallet, args._dao_uri, args._template],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateTemplate(pay,byte[],string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateTemplate(args: MethodArgs<'updateTemplate(pay,byte[],string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateTemplate(pay,byte[],string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxMBRPayment, args._dao_id, args._template],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createGoal(pay,byte[],string,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createGoal(args: MethodArgs<'createGoal(pay,byte[],string,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createGoal(pay,byte[],string,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxMBRPayment, args._goal_id, args._goal_uri, args._dao_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createIdeas(pay,byte[],string,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createIdeas(args: MethodArgs<'createIdeas(pay,byte[],string,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createIdeas(pay,byte[],string,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxMBRPayment, args._ideas_id, args._ideas_uri, args._goal_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createIdeasVote(pay,byte[],uint64,uint64,string)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createIdeasVote(args: MethodArgs<'createIdeasVote(pay,byte[],uint64,uint64,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createIdeasVote(pay,byte[],uint64,uint64,string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxMBRPayment, args._ideas_votes_id, args._goal_id, args._ideas_id, args._wallet],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendMsg(pay,byte[],uint64,string,string)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendMsg(args: MethodArgs<'sendMsg(pay,byte[],uint64,string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendMsg(pay,byte[],uint64,string,string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxMBRPayment, args._message_id, args._ideas_id, args._message, args._sender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendReply(pay,byte[],uint64,string,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendReply(args: MethodArgs<'sendReply(pay,byte[],uint64,string,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendReply(pay,byte[],uint64,string,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxMBRPayment, args._reply_id, args._message_id, args._reply, args.ideas_id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addDonation(pay,byte[],byte[],uint64,uint64,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addDonation(args: MethodArgs<'addDonation(pay,byte[],byte[],uint64,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addDonation(pay,byte[],byte[],uint64,uint64,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxMBRPayment, args._donation_id, args._ideas_id, args._ideas_id_int, args._doantion, args._donator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the joinCommunity(pay,byte[],uint64,string)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static joinCommunity(args: MethodArgs<'joinCommunity(pay,byte[],uint64,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'joinCommunity(pay,byte[],uint64,string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.boxMBRPayment, args._join_id, args.dao_id, args.person],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Granddao smart contract
 */
export class GranddaoClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `GranddaoClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Granddao['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Granddao smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: GranddaoDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(GranddaoCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Granddao smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(GranddaoCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Granddao smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the pay(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public pay(args: MethodArgs<'pay(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GranddaoCallFactory.pay(args, params))
  }

  /**
   * Calls the createDao(pay,byte[],string,string,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createDao(args: MethodArgs<'createDao(pay,byte[],string,string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GranddaoCallFactory.createDao(args, params))
  }

  /**
   * Calls the updateTemplate(pay,byte[],string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateTemplate(args: MethodArgs<'updateTemplate(pay,byte[],string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GranddaoCallFactory.updateTemplate(args, params))
  }

  /**
   * Calls the createGoal(pay,byte[],string,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createGoal(args: MethodArgs<'createGoal(pay,byte[],string,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GranddaoCallFactory.createGoal(args, params))
  }

  /**
   * Calls the createIdeas(pay,byte[],string,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createIdeas(args: MethodArgs<'createIdeas(pay,byte[],string,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GranddaoCallFactory.createIdeas(args, params))
  }

  /**
   * Calls the createIdeasVote(pay,byte[],uint64,uint64,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createIdeasVote(args: MethodArgs<'createIdeasVote(pay,byte[],uint64,uint64,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GranddaoCallFactory.createIdeasVote(args, params))
  }

  /**
   * Calls the sendMsg(pay,byte[],uint64,string,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendMsg(args: MethodArgs<'sendMsg(pay,byte[],uint64,string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GranddaoCallFactory.sendMsg(args, params))
  }

  /**
   * Calls the sendReply(pay,byte[],uint64,string,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendReply(args: MethodArgs<'sendReply(pay,byte[],uint64,string,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GranddaoCallFactory.sendReply(args, params))
  }

  /**
   * Calls the addDonation(pay,byte[],byte[],uint64,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addDonation(args: MethodArgs<'addDonation(pay,byte[],byte[],uint64,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GranddaoCallFactory.addDonation(args, params))
  }

  /**
   * Calls the joinCommunity(pay,byte[],uint64,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public joinCommunity(args: MethodArgs<'joinCommunity(pay,byte[],uint64,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GranddaoCallFactory.joinCommunity(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Granddao['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get _dao_ids() {
        return GranddaoClient.getIntegerState(state, '_dao_ids')
      },
      get _donations_ids() {
        return GranddaoClient.getIntegerState(state, '_donations_ids')
      },
      get _goal_ids() {
        return GranddaoClient.getIntegerState(state, '_goal_ids')
      },
      get _ideas_ids() {
        return GranddaoClient.getIntegerState(state, '_ideas_ids')
      },
      get _join_ids() {
        return GranddaoClient.getIntegerState(state, '_join_ids')
      },
      get _ideas_vote_ids() {
        return GranddaoClient.getIntegerState(state, '_ideas_vote_ids')
      },
      get _message_ids() {
        return GranddaoClient.getIntegerState(state, '_message_ids')
      },
      get _reply_ids() {
        return GranddaoClient.getIntegerState(state, '_reply_ids')
      },
    }
  }

  public compose(): GranddaoComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      pay(args: MethodArgs<'pay(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.pay(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createDao(args: MethodArgs<'createDao(pay,byte[],string,string,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createDao(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateTemplate(args: MethodArgs<'updateTemplate(pay,byte[],string)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateTemplate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createGoal(args: MethodArgs<'createGoal(pay,byte[],string,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createGoal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createIdeas(args: MethodArgs<'createIdeas(pay,byte[],string,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createIdeas(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createIdeasVote(args: MethodArgs<'createIdeasVote(pay,byte[],uint64,uint64,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createIdeasVote(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendMsg(args: MethodArgs<'sendMsg(pay,byte[],uint64,string,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendMsg(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendReply(args: MethodArgs<'sendReply(pay,byte[],uint64,string,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendReply(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addDonation(args: MethodArgs<'addDonation(pay,byte[],byte[],uint64,uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addDonation(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      joinCommunity(args: MethodArgs<'joinCommunity(pay,byte[],uint64,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.joinCommunity(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as GranddaoComposer
  }
}
export type GranddaoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the pay(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pay(args: MethodArgs<'pay(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GranddaoComposer<[...TReturns, MethodReturn<'pay(pay)void'>]>

  /**
   * Calls the createDao(pay,byte[],string,string,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createDao(args: MethodArgs<'createDao(pay,byte[],string,string,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GranddaoComposer<[...TReturns, MethodReturn<'createDao(pay,byte[],string,string,string)uint64'>]>

  /**
   * Calls the updateTemplate(pay,byte[],string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTemplate(args: MethodArgs<'updateTemplate(pay,byte[],string)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GranddaoComposer<[...TReturns, MethodReturn<'updateTemplate(pay,byte[],string)string'>]>

  /**
   * Calls the createGoal(pay,byte[],string,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createGoal(args: MethodArgs<'createGoal(pay,byte[],string,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GranddaoComposer<[...TReturns, MethodReturn<'createGoal(pay,byte[],string,uint64)uint64'>]>

  /**
   * Calls the createIdeas(pay,byte[],string,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createIdeas(args: MethodArgs<'createIdeas(pay,byte[],string,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GranddaoComposer<[...TReturns, MethodReturn<'createIdeas(pay,byte[],string,uint64)uint64'>]>

  /**
   * Calls the createIdeasVote(pay,byte[],uint64,uint64,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createIdeasVote(args: MethodArgs<'createIdeasVote(pay,byte[],uint64,uint64,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GranddaoComposer<[...TReturns, MethodReturn<'createIdeasVote(pay,byte[],uint64,uint64,string)uint64'>]>

  /**
   * Calls the sendMsg(pay,byte[],uint64,string,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendMsg(args: MethodArgs<'sendMsg(pay,byte[],uint64,string,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GranddaoComposer<[...TReturns, MethodReturn<'sendMsg(pay,byte[],uint64,string,string)uint64'>]>

  /**
   * Calls the sendReply(pay,byte[],uint64,string,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendReply(args: MethodArgs<'sendReply(pay,byte[],uint64,string,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GranddaoComposer<[...TReturns, MethodReturn<'sendReply(pay,byte[],uint64,string,uint64)uint64'>]>

  /**
   * Calls the addDonation(pay,byte[],byte[],uint64,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addDonation(args: MethodArgs<'addDonation(pay,byte[],byte[],uint64,uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GranddaoComposer<[...TReturns, MethodReturn<'addDonation(pay,byte[],byte[],uint64,uint64,string)void'>]>

  /**
   * Calls the joinCommunity(pay,byte[],uint64,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  joinCommunity(args: MethodArgs<'joinCommunity(pay,byte[],uint64,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): GranddaoComposer<[...TReturns, MethodReturn<'joinCommunity(pay,byte[],uint64,string)uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the Granddao smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): GranddaoComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): GranddaoComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<GranddaoComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<GranddaoComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type GranddaoComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type GranddaoComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
